name: Refresh
on:
  schedule:
    - cron: '0 0 * * 0'
  push:
    branches:
      - 'automation'
      - 'automation-test'

jobs:
  update:
    runs-on: ubuntu-latest
    name: "Update Mirror"
    steps:
    - name: "Checkout"
      uses: actions/checkout@v2
    - name: "Configure"
      shell: bash
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'xaymar@users.noreply.github.com'
        git config pull.ff only
        git config pull.rebase true
    - name: "Remotes"
      shell: bash
      run: |
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        git remote add -f --tags remote https://code.videolan.org/videolan/x264.git
        git fetch --all
    - name: "Update and Trigger Builds"
      shell: bash
      run: |
        declare -a BRANCHES
        BRANCHES[${#BRANCHES[@]}]="master"
        BRANCHES[${#BRANCHES[@]}]="stable"

        for d in ${BRANCHES[@]}; do
          if ! git diff -s --exit-code origin/${d} remote/${d}; then
            # Update Branch
            echo "Branch '${d}' requires update."
            git checkout -b ${d} remote/${d}
            git push --set-upstream origin ${d}

            # Set build reference
            ref="${d}"

            # If this is the main branch, push a new tag as well.
            if [ "${d}" == "${BRANCHES[0]}" ]; then
              # Grab version info from x264 and git.
              api="$(grep '#define X264_BUILD' < x264.h | sed 's/^.* \([1-9][0-9]*\).*$/\1/')"
              localver="$(($(git rev-list HEAD | wc -l)))"

              # Create tag and update build reference
              tag="0.${api}.${localver}"
              ref="refs/tags/${tag}"
              if git tag -a ${tag}; then
                git push origin ${tag}
              fi
            fi

            # Spawn a new build
            curl -s --show-error \
              -X POST \
              -H "Authorization: token ${{ secrets.WORKFLOW_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"ref\":\"${{ github.ref }}\",\"inputs\":{\"ref\":\"${ref}\"}}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/dispatches"
          else
            echo "Branch '${d}' is up to date."
          fi
        done
